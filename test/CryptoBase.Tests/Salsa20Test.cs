using CryptoBase.Abstractions.SymmetricCryptos;
using CryptoBase.BouncyCastle.SymmetricCryptos.StreamCryptos;
using CryptoBase.DataFormatExtensions;
using CryptoBase.SymmetricCryptos.StreamCryptos;
using CryptoBase.SymmetricCryptos.StreamCryptos.Salsa20;

namespace CryptoBase.Tests;

public class Salsa20Test
{
	/// <summary>
	/// https://github.com/das-labor/legacy/blob/master/microcontroller-2/crypto-lib/testvectors/salsa20-full-verified.test-vectors#L2068
	/// https://github.com/das-labor/legacy/blob/master/microcontroller-2/crypto-lib/testvectors/salsa20-full-verified.test-vectors#L4669
	/// </summary>
	public static readonly TheoryData<string, string, string, string, string, string> Data = new()
	{
		{ @"0053A6F94C9FF24598EB3E91E4378ADD", @"0D74DB42A91077DE", @"05E1E7BEB697D999656BF37C1B978806735D0B903A6007BD329927EFBE1B0E2A8137C1AE291493AA83A821755BEE0B06CD14855A67E46703EBF8F3114B584CBA", @"1A70A37B1C9CA11CD3BF988D3EE4612D15F1A08D683FCCC6558ECF2089388B8E555E7619BF82EE71348F4F8D0D2AE464339D66BFC3A003BF229C0FC0AB6AE1C6", @"4ED220425F7DDB0C843232FB03A7B1C7616A50076FB056D3580DB13D2C295973D289CC335C8BC75DD87F121E85BB998166C2EF415F3F7A297E9E1BEE767F84E2", @"E121F8377E5146BFAE5AEC9F422F474FD3E9C685D32744A76D8B307A682FCA1B6BF790B5B51073E114732D3786B985FD4F45162488FEEB04C8F26E27E0F6B5CD" },
		{ @"0558ABFE51A4F74A9DF04396E93C8FE2", @"167DE44BB21980E7", @"EF5236C33EEEC2E337296AB237F99F56A48639744788E128BC05275D4873B9F0FAFDA8FAF24F0A61C2903373F3DE3E459928CD6F2172EA6CDBE7B0FBF45D3DAD", @"29412152F2750DC2F951EC969B4E9587DCD2A23DAADCBC20677DDFE89096C883E65721FC8F7BFC2D0D1FD6143D8504CB7340E06FE324CE3445081D3B7B72F3B3", @"49BFE800381794D264028A2E32D318E7F6FD9B377ED3A12274CE21D40CCEF04D55791AF99849989C21D00E7D4E7B9FF4D46AABC44AED676B5C69CF32BE386205", @"C3E16260DD666D8D8FBF1529D0E8151A931663D75FA0046132E4AD78D8BE7F8D7F41AAEFDE58BA80B962B8B68762CDF3E4B06E05D73D22CC33F1E1592D5116F4" },
		{ @"0A5DB00356A9FC4FA2F5489BEE4194E7", @"1F86ED54BB2289F0", @"8B354C8F8384D5591EA0FF23E7960472B494D04B2F787FC87B6569CB9021562FF5B1287A4D89FB316B69971E9B861A109CF9204572E3DE7EAB4991F4C7975427", @"B8B26382B081B45E135DF7F8C468ACEA56EB33EC38F292E3246F5A90233DDDC1CD977E0996641C3FA4BB42E7438EE04D8C275C57A69EEA872A440FC6EE39DB21", @"C0BA18C9F84D6A2E10D2CCCC041D736A943592BB626D2832A9A6CCC1005DDB9EA1694370FF15BD486B77629BB363C3B121811BCCFB18537502712A63061157D8", @"870355A6A03D4BC9038EA0CB2F4B8006B42D70914FBFF76A80D2567BE8404B03C1124BCE2FD863CE7438A5680D23C5E1F8ED3C8A6DB656BFF7B060B8A8966E09" },
		{ @"0F62B5085BAE0154A7FA4DA0F34699EC", @"288FF65DC42B92F9", @"71DAEE5142D0728B41B6597933EBF467E43279E30978677078941602629CBF68B73D6BD2C95F118D2B3E6EC955DABB6DC61C4143BC9A9B32B99DBE6866166DC0", @"906258725DDD0323D8E3098CBDAD6B7F941682A4745E4A42B3DC6EDEE565E6D9C65630610CDB14B5F110425F5A6DBF1870856183FA5B91FC177DFA721C5D6BF0", @"09033D9EBB07648F92858913E220FC528A10125919C891CCF8051153229B958BA9236CADF56A0F328707F7E9D5F76CCBCAF5E46A7BB9675655A426ED377D660E", @"F9876CA5B5136805445520CDA425508AE0E36DE975DE381F80E77D951D885801CEB354E4F45A2ED5F51DD61CE09942277F493452E0768B2624FACA4D9E0F7BE4" },
		{ @"0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D", @"0D74DB42A91077DE", @"F5FAD53F79F9DF58C4AEA0D0ED9A9601F278112CA7180D565B420A48019670EAF24CE493A86263F677B46ACE1924773D2BB25571E1AA8593758FC382B1280B71", @"B70C50139C63332EF6E77AC54338A4079B82BEC9F9A403DFEA821B83F7860791650EF1B2489D0590B1DE772EEDA4E3BCD60FA7CE9CD623D9D2FD5758B8653E70", @"81582C65D7562B80AEC2F1A673A9D01C9F892A23D4919F6AB47B9154E08E699B4117D7C666477B60F8391481682F5D95D96623DBC489D88DAA6956B9F0646B6E", @"A13FFA1208F8BF50900886FAAB40FD10E8CAA306E63DF39536A1564FB760B242A9D6A4628CDC878762834E27A541DA2A5E3B3445989C76F611E0FEC6D91ACACC" },
		{ @"0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12", @"167DE44BB21980E7", @"3944F6DC9F85B128083879FDF190F7DEE4053A07BC09896D51D0690BD4DA4AC1062F1E47D3D0716F80A9B4D85E6D6085EE06947601C85F1A27A2F76E45A6AA87", @"36E03B4B54B0B2E04D069E690082C8C592DF56E633F5D8C7682A02A65ECD13718CA4352AACCB0DA20ED6BBBA62E177F210E3560E63BB822C4158CAA806A88C82", @"1B779E7A917C8C26039FFB23CF0EF8E08A1A13B43ACDD9402CF5DF38501098DFC945A6CC69A6A17367BC03431A86B3ED04B0245B56379BF997E25800AD837D7D", @"7EC6DAE81A105E67172A0B8C4BBE7D06A7A8759F914FBEB1AF62C8A552EF4A4F56967EA29C7471F46F3B07F7A3746E953D315821B85B6E8CB40122B96635313C" },
		{ @"0A5DB00356A9FC4FA2F5489BEE4194E73A8DE03386D92C7FD22578CB1E71C417", @"1F86ED54BB2289F0", @"3FE85D5BB1960A82480B5E6F4E965A4460D7A54501664F7D60B54B06100A37FFDCF6BDE5CE3F4886BA77DD5B44E95644E40A8AC65801155DB90F02522B644023", @"C8D6E54C29CA204018A830E266CEEE0D037DC47E921947302ACE40D1B996A6D80B598677F3352F1DAA6D9888F891AD95A1C32FFEB71BB861E8B07058515171C9", @"B79FD776542B4620EFCB88449599F23403E74A6E91CACC50A05A8F8F3C0DEA8B00E1A5E6081F5526AE975B3BC0450F1A0C8B66F808F1904B971361137C93156F", @"7998204FED70CE8E0D027B206635C08C8BC443622608970E40E3AEDF3CE790AEEDF89F922671B45378E2CD03F6F62356529C4158B7FF41EE854B1235373988C8" },
		{ @"0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", @"288FF65DC42B92F9", @"5E5E71F90199340304ABB22A37B6625BF883FB89CE3B21F54A10B81066EF87DA30B77699AA7379DA595C77DD59542DA208E5954F89E40EB7AA80A84A6176663F", @"2DA2174BD150A1DFEC1796E921E9D6E24ECF0209BCBEA4F98370FCE629056F64917283436E2D3F45556225307D5CC5A565325D8993B37F1654195C240BF75B16", @"ABF39A210EEE89598B7133377056C2FEF42DA731327563FB67C7BEDB27F38C7C5A3FC2183A4C6B277F901152472C6B2ABCF5E34CBE315E81FD3D180B5D66CB6C", @"1BA89DBD3F98839728F56791D5B7CE235036DE843CCCAB0390B8B5862F1E4596AE8A16FB23DA997F371F4E0AACC26DB8EB314ED470B1AF6B9F8D69DD79A9D750" }
	};

	private static void Test_Internal(SnuffleCryptoBase crypto, string hex0, string hex1, string hex2, string hex3)
	{
		Assert.Equal(@"Salsa20", crypto.Name);
		Assert.Equal(8, crypto.IvSize);

		Span<byte> h0 = hex0.FromHex();
		Span<byte> h1 = hex1.FromHex();
		Span<byte> h2 = hex2.FromHex();
		Span<byte> h3 = hex3.FromHex();

		Span<byte> i = stackalloc byte[512];
		Span<byte> o = stackalloc byte[512];

		crypto.Update(i[..63], o);// 0 - 62
		Assert.True(o[..63].SequenceEqual(h0[..63]));
		crypto.Update(i[..63], o);// 63 - 125
		Assert.Equal(h0[63], o[0]);

		// 126 - 65456
		for (int j = 0; j < 1037; j++)
		{
			crypto.Update(i[..63], o);
		}

		crypto.Update(i[..63], o);// 65457 - 65519
		Assert.True(o[15..63].SequenceEqual(h1[..48]));
		crypto.Update(i[..63], o);// 65520 - 65582
		Assert.True(o[..16].SequenceEqual(h1[48..]));
		Assert.True(o.Slice(16, 47).SequenceEqual(h2[..47]));

		crypto.Update(i[..64], o);// 65583 - 65646
		Assert.True(o[..17].SequenceEqual(h2[47..]));

		// 65647 - 130990
		for (int j = 0; j < 1021; j++)
		{
			crypto.Update(i[..64], o);
		}

		crypto.Update(i[..64], o);// 130991 - 131054
		Assert.True(o[17..64].SequenceEqual(h3[..47]));
		crypto.Update(i[..64], o);// 131055 - 131118
		Assert.True(o[..17].SequenceEqual(h3[47..]));

		crypto.Reset();

		crypto.Update(i[..128], o);// 0 - 127
		Assert.True(o[..64].SequenceEqual(h0));
		crypto.Update(i[..64], o);// 128 - 191

		// 192 - 65471
		for (int j = 0; j < 510; j++)
		{
			crypto.Update(i[..128], o);
		}

		crypto.Update(i[..128], o);// 65472 - 65599
		Assert.True(o[..64].SequenceEqual(h1));
		Assert.True(o.Slice(64, 64).SequenceEqual(h2));

		// 65600 - 130879
		for (int j = 0; j < 255; j++)
		{
			crypto.Update(i[..256], o);
		}

		crypto.Update(i[..256], o);// 130880 - 131135
		Assert.True(o.Slice(128, 64).SequenceEqual(h3));

		crypto.Reset();
		crypto.Update(i[..512], o);// 0 - 511
		Assert.True(o[..64].SequenceEqual(h0));

		// 512 - 65535
		for (int j = 0; j < 127; j++)
		{
			crypto.Update(i[..512], o);
		}

		Assert.True(o.Slice(448, 64).SequenceEqual(h1));
		crypto.Update(i[..512], o);// 65536 - 66047
		Assert.True(o[..64].SequenceEqual(h2));

		// 66048 - 131071
		for (int j = 0; j < 127; j++)
		{
			crypto.Update(i[..512], o);
		}

		Assert.True(o.Slice(448, 64).SequenceEqual(h3));

		crypto.Reset();

		crypto.Update(i[..64], o);// 0 - 63
		Assert.True(o[..64].SequenceEqual(h0));

		for (int j = 0; j < 1023; j++)
		{
			crypto.Update(i[..64], o);
		}

		Assert.True(o[..64].SequenceEqual(h1));
		crypto.Update(i[..64], o);
		Assert.True(o[..64].SequenceEqual(h2));

		for (int j = 0; j < 1023; j++)
		{
			crypto.Update(i[..64], o);
		}

		Assert.True(o[..64].SequenceEqual(h3));

		crypto.Dispose();
	}

	[Theory]
	[MemberData(nameof(Data), MemberType = typeof(Salsa20Test))]
	public void Test(string keyHex, string ivHex, string hex0, string hex1, string hex2, string hex3)
	{
		byte[] key = keyHex.FromHex();
		byte[] iv = ivHex.FromHex();
		Test_Internal(new BcSalsa20Crypto(key, iv), hex0, hex1, hex2, hex3);
		Test_Internal(new Salsa20CryptoSF(key, iv), hex0, hex1, hex2, hex3);
		Test_Internal(StreamCryptoCreate.Salsa20(key, iv), hex0, hex1, hex2, hex3);
	}

	[Theory(Skip = "X86", SkipUnless = nameof(TestEnvironment.TestX86), SkipType = typeof(TestEnvironment))]
	[MemberData(nameof(Data), MemberType = typeof(Salsa20Test))]
	public void TestX86(string keyHex, string ivHex, string hex0, string hex1, string hex2, string hex3)
	{
		byte[] key = keyHex.FromHex();
		byte[] iv = ivHex.FromHex();

		for (int i = 0; i < 100; ++i)
		{
			Test_Internal(new Salsa20CryptoX86(key, iv), hex0, hex1, hex2, hex3);
		}
	}
}
