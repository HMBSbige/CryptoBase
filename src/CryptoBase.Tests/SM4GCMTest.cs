using CryptoBase.Abstractions.SymmetricCryptos;
using CryptoBase.DataFormatExtensions;
using CryptoBase.SymmetricCryptos.AEADCryptos;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CryptoBase.Tests;

[TestClass]
public class SM4GCMTest
{
	private static void Test(IAEADCrypto crypto, string nonceHex, string associatedDataHex, string tagHex, string plainHex, string cipherHex)
	{
		Assert.AreEqual(@"SM4-GCM", crypto.Name);

		crypto.AEADTest(nonceHex, associatedDataHex, tagHex, plainHex, cipherHex);
	}

	/// <summary>
	///https://tools.ietf.org/html/rfc8998#appendix-A.1
	/// </summary>
	[TestMethod]
	[DataRow(@"0123456789ABCDEFFEDCBA9876543210", @"00001234567800000000ABCD", @"FEEDFACEDEADBEEFFEEDFACEDEADBEEFABADDAD2",
		@"83DE3541E4C2B58177E065A9BF7B62EC",
		@"AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAA",
		@"17F399F08C67D5EE19D0DC9969C4BB7D5FD46FD3756489069157B282BB200735D82710CA5C22F0CCFA7CBF93D496AC15A56834CBCF98C397B4024A2691233B8D")]
	[DataRow(@"957662F0F3757BBC2224101E7EEB5FAF", @"DFC696A260924A776E00967D", @"0284CBF574F66458A3CD31BA17D49D31C5925FC8D7E68B64726EDBAF04D6B8CD",
		@"F58A930BE914BA9F361F165B9483C6A7",
		
		@"66E0F0AA3F5C329D0CBCF661054103BD1ED72432B41ACF62C258A65C8D2EF30EB0205E87271B5E3DA4F71582CDF3BD4F090EEF725BD4F8BB2A3DD441883A6188B381FAE71B6EDC99A6C0CEB1B5DA18BFFF048DCBFB0E19F4DC88B14969287F7A86806A794923DC3A4720002BF8E7C16265C18A21C636AAED2D952B95D51938820D1FBE319B64A4700D0BC6A5AE764302484A2CB598C85BBB5909D0797F17762AC7834B0918A986399C625FECF3A7B66372ECD54329FBCC8C900F52B76B1EF32719063D50037D5384B67BBFA5869DFCFDE535D4FA574C5E2C4D063FBDF76F96356AB7C357D4E8657A7BFE80E7F57681177575B5F070DD1D5E9B1792FDF56108EB3862459D4B53E203A5D0C3077346473FB78F70C4A8ACAD467B5A90960E38169A849153C4ED67D86DBE93EC5E66895C4FAED2E59D8830A1125A380572B7B420B45BD05E8B914933197B8DE9E1015EF55A7B5283AD6B02C685977E0D6C234FADD297183E8E80109A64C1146327BC39736C3385672826BB436E144FFF02A93C27ED177CFF304536B6BE391354A10DFC0403E26A04C5222AEC7CBB17BA3810ADDE3EE4F0117A93DBFD66BDE6480A4442CC889DD2E7CEE61772D671196EB1B09D12213FE8B6C85CF0BC0125A970CAA9C5B8719F14BE541BD1931222885C5EB2F09A7E6FAC546EF4CC62913972D464E0990E3900D5396691214994E9BD56177A6894")]
	public void Test(string keyHex, string nonceHex, string associatedDataHex, string tagHex, string plainHex, string cipherHex)
	{
		byte[] key = keyHex.FromHex();
		Test(AEADCryptoCreate.Sm4Gcm(key), nonceHex, associatedDataHex, tagHex, plainHex, cipherHex);
	}
}
